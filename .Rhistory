the_ic <- glmnet_ic$lambda_BIC
} else {
the_ic <- glmnet_ic$lambda_AICc
}
# retrieve posterior probabilities for each topic
topics <- posterior(LDA_fit,newdata)$topics
# calculate predicted values
fitted <- predict(glmnet_fit,newx=topics,s=the_ic)
return(fitted)
}#PREDICT.MDL_GLMNET
y<-rbinom(2246,1,0.3)
myfit <- mdl_topicLasso(y[1:1000],AssociatedPress[1:1000,],k=3)
predict.mdl_topicLasso(myfit,newdata=AssociatedPress[1000:1500,])
fit1
deviance(fit1)
deviance(fit1$df)
fit1$df
nobs(fit1)
library(topicmodels)
library(broom)
library(glmnet)
data("AssociatedPress")
AssociatedPress
glmnetIC <- function(fit){
tLL <- -deviance(fit) # 2*log-likelihood
k <- as.numeric(fit$df)
n <- nobs(fit)
AICc <- -tLL+2*k+2*k*(k+1)/(n-k-1)
BIC<-log(n)*k - tLL
lam <- fit$lambda
AICc_min<-which.min(AICc)
BIC_min<-which.min(BIC)
res=list(AIC=AIC,BIC=BIC,AICc=AICc,lambda_AICc=lam[AICc_min],lambda_BIC=lam[BIC_min])
return(res)
}
mdl_topicLasso <- function(y,X,k,method="VEM",control=NULL,model=NULL,...) {
LDA_fit<-LDA(x=X,k=k,method=method,control=control,model=model)
topics <- posterior(LDA_fit)$topic
glmnet_fit <- glmnet(topics,y)
glmnet_ic <- glmnetIC(glmnet_fit)
mdl_fit <- list(glmnet_fit=glmnet_fit,
glmnet_ic=glmnet_ic,
LDA_fit=LDA_fit,
k=k)
class(mdl_fit) <- c("mdl_topicLasso")
return(mdl_fit)
}
predict.mdl_topicLasso <- function(object, newdata = NULL, ic="BIC",...){
glmnet_fit <- object$glmnet_fit
glmnet_ic <- object$glmnet_ic
LDA_fit <- object$LDA_fit
# select information criterion
if (ic=="BIC") {
the_ic <- glmnet_ic$lambda_BIC
} else {
the_ic <- glmnet_ic$lambda_AICc
}
# retrieve posterior probabilities for each topic
topics <- posterior(LDA_fit,newdata)$topics
# calculate predicted values
fitted <- predict(glmnet_fit,newx=topics,s=the_ic)
return(fitted)
}#PREDICT.MDL_GLMNET
y<-rbinom(2246,1,0.3)
myfit <- mdl_topicLasso(y[1:1000],AssociatedPress[1:1000,],k=3)
predict.mdl_topicLasso(myfit,newdata=AssociatedPress[1000:1500,])
library(topicmodels)
library(broom)
library(glmnet)
data("AssociatedPress")
AssociatedPress
glmnetIC <- function(fit){
tLL <- -deviance(fit) # 2*log-likelihood
k <- as.numeric(fit$df)
n <- nobs(fit)
AICc <- -tLL+2*k+2*k*(k+1)/(n-k-1)
BIC<-log(n)*k - tLL
lam <- fit$lambda
AICc_min<-which.min(AICc)
BIC_min<-which.min(BIC)
res=list(AIC=AIC,BIC=BIC,AICc=AICc,lambda_AICc=lam[AICc_min],lambda_BIC=lam[BIC_min])
return(res)
}
mdl_topicLasso <- function(y,X,k,method="VEM",control=NULL,model=NULL,...) {
LDA_fit<-LDA(x=X,k=k,method=method,control=control,model=model)
topics <- posterior(LDA_fit)$topic
glmnet_fit <- glmnet(topics,y)
glmnet_ic <- glmnetIC(glmnet_fit)
mdl_fit <- list(glmnet_fit=glmnet_fit,
glmnet_ic=glmnet_ic,
LDA_fit=LDA_fit,
k=k)
class(mdl_fit) <- c("mdl_topicLasso")
return(mdl_fit)
}
predict.mdl_topicLasso <- function(object, newdata = NULL, ic="BIC",...){
glmnet_fit <- object$glmnet_fit
glmnet_ic <- object$glmnet_ic
LDA_fit <- object$LDA_fit
# select information criterion
if (ic=="BIC") {
the_ic <- glmnet_ic$lambda_BIC
} else {
the_ic <- glmnet_ic$lambda_AICc
}
# retrieve posterior probabilities for each topic
topics <- posterior(LDA_fit,newdata)$topics
# calculate predicted values
fitted <- predict(glmnet_fit,newx=topics,s=the_ic)
return(fitted)
}#PREDICT.MDL_GLMNET
y<-rbinom(2246,1,0.3)
myfit <- mdl_topicLasso(y[1:1000],AssociatedPress[1:1000,],k=3)
yhat<-predict.mdl_topicLasso(myfit,newdata=AssociatedPress[1000:1500,])
myfit$glmnet_fit
coef(myfit$glmnet_fit)
myfit$glmnet_ic$BIC
myfit$glmnet_ic$lambda_BIC
fit1$lambda
yhat
0.0173/0.00967
0.0173/0.00967-1
0.0167/0.011
q("no")
library("ddml")
?ddml_plm
library("ddml")
?ddml_plm
r(list(1),3)
rep(list(1),3)
q("no")
library("policytree")
?double_scores
library("grf")
?double_scores
?grf
?policytree
exp(1.2)
exp(-.5)
exp(-.5)exp(0)
exp(-.5)*exp(0)
exp(-.5)-exp(0)
exp(0)
exp(-.5)
exp(-.01)
exp(-1.2)
exp(-.45)
exp(-.5)
q("no")
library(tidymodels)
library("tidymodels")
library("parnisp")
library("parsnip")
install.packages("tidymodels")
library("tidymodels")
?parsnip
?reg_linear
library(tidymodels)
fit <-
linear_reg(penalty = 1) %>%
set_engine("glmnet") %>%
fit(mpg ~ ., data = mtcars)
install.packages("glmnet")
library(tidymodels)
fit <-
linear_reg(penalty = 1) %>%
set_engine("glmnet") %>%
fit(mpg ~ ., data = mtcars)
# predict at penalty = 1
predict(fit, mtcars[1:3,])
library(tidymodels)
fit <-
linear_reg(penalty = 2) %>%
set_engine("glmnet") %>%
fit(mpg ~ ., data = mtcars)
# predict at penalty = 1
predict(fit, mtcars[1:3,])
library(tidymodels)
fit <-
linear_reg(penalty = 2) %>%
set_engine("glmnet") %>%
fit(mpg ~ ., data = mtcars)
# predict at penalty = 1
predict(fit, mtcars[1:3,])
library(tidymodels)
fit <-
linear_reg(penalty = 2) %>%
set_engine("glmnet") %>%
fit(mpg ~ ., data = mtcars)
# predict at penalty = 1
predict(fit, mtcars[1:3,])
library(tidymodels)
fit <-
linear_reg(penalty = 1) %>%
set_engine("glmnet") %>%
fit(mpg ~ ., data = mtcars)
# predict at penalty = 1
predict(fit, mtcars[1:3,])
library(tidymodels)
fit <-
linear_reg(penalty = 3) %>%
set_engine("glmnet") %>%
fit(mpg ~ ., data = mtcars)
# predict at penalty = 1
predict(fit, mtcars[1:3,])
linear_reg(penalty = 5)
?linear_reg()
q("no")
rm(list=ls())
library("tidyverse")
library("fixest")
library("AER")
library("lfe")
library("broom")
library("powerLATE")
library(RColorBrewer)
library(metR)
library("foreach")
library("doParallel")
library("estimatr")
set.seed(123)
firm_data <- function(tau=0.05,Nv=1,Nf=10000) {
dta<-data.frame(fid=1:Nf)
dta$D <- sample(c(0,1,2,3),replace=TRUE,size=Nf)
dta$id <- 1:nrow(dta)
dta <- dta |>
mutate(D1 = 1*(D==1),
D2 = 1*(D==2),
D3 = 1*(D==3),
y=rbinom(n=n(),size=1,prob=tau*(D>=1) + 0.004)
)
return(dta)
}
firm_trial <- function(...) {
dta <- firm_data(...)
out <- feols(y~D1+D2+D3,cluster="fid",data=dta) |> tidy()
return(out)
}
firm_results <-  expand_grid(tau=seq(0.01,.05,by=0.0025),
Nf=seq(2000,10000,by=1000)
)
reps <- 400
cl<-makeCluster(12)
registerDoParallel(cl)
out_power <- foreach (i=1:nrow(firm_results),.packages=c("broom","estimatr","tidyr","dplyr","fixest"),.combine="rbind") %dopar% {
out <- vector(mode="list",length=reps)
out <- lapply(out,function(x) firm_trial(Nf=firm_results$Nf[i],
tau=firm_results$tau[i]
))
out <- bind_rows(out)
out <- out |>
mutate(sign=p.value<0.05)
out <- out |>
filter(term=="D1")
c(mean(out$sign))
}
stopCluster(cl)
firm_results$power <- out_power[,1]
firm_results |>
ggplot(aes(x=Nf,y=tau,z=power)) +
geom_contour2(breaks=c(.7,.8,.9,Inf)) +
geom_contour2(breaks=c(.8),color="red") +
metR::geom_text_contour(breaks=c(.7,.8,.9,Inf),stroke=.4,skip=0,
label.placer=label_placer_fraction(0.5)) +
xlab(expression("Number of relevant firms "~N)) +
ylab(expression("Absolute effect size "~tau)) +
ggtitle("Statistical power in the firm experiment") +
theme_classic()
60/10
rnormal(40)
rnorm(40)
rnorm(40)*10000
floor(rnorm(40)*10000)
floor(rnorm(40)*100000)
floor(runif(40)*100000)
floor(runif(40)*100000) |> paste(collapse=" ")
q("no")
runif(4)
floor(runif(4)*100000)
q("no")
setwd("/Users/kahrens/MyProjects/ddml")
library("stringr")
all.files <- dir()
all.files <- all.files[str_detect(all.files,"ado")]
for (i in 1:length(all.files)) {
txt <- readLines(all.files[i])
txt[1] <- "*! ddml v1.4"
txt[2] <- "*! last edited: 25july2023"
writeLines(txt,con=all.files[i])
}
all.files <- dir()
all.files <- all.files[str_detect(all.files,"sthlp")]
for (i in 1:length(all.files)) {
txt <- readLines(all.files[i])
txt[2] <- "{* *! version 25july2023}{...}"
txt[4] <- str_replace(txt[4],"\\{right: v1.2\\}","\\{right: v1.4\\}")
writeLines(txt,con=all.files[i])
}
setwd("/Users/kahrens/MyProjects/ddml")
library("stringr")
all.files <- dir()
all.files <- all.files[str_detect(all.files,"ado")]
for (i in 1:length(all.files)) {
txt <- readLines(all.files[i])
txt[1] <- "*! ddml v1.4"
txt[2] <- "*! last edited: 25july2023"
writeLines(txt,con=all.files[i])
}
all.files <- dir()
all.files <- all.files[str_detect(all.files,"sthlp")]
for (i in 1:length(all.files)) {
txt <- readLines(all.files[i])
txt[2] <- "{* *! version 25july2023}{...}"
txt[4] <- str_replace(txt[4],"\\{right: v1.2\\}","\\{right: v1.4\\}")
writeLines(txt,con=all.files[i])
}
setwd("/Users/kahrens/MyProjects/ddml")
library("stringr")
all.files <- dir()
all.files <- all.files[str_detect(all.files,"ado")]
for (i in 1:length(all.files)) {
txt <- readLines(all.files[i])
txt[1] <- "*! ddml v1.4"
txt[2] <- "*! last edited: 26july2023"
writeLines(txt,con=all.files[i])
}
all.files <- dir()
all.files <- all.files[str_detect(all.files,"sthlp")]
for (i in 1:length(all.files)) {
txt <- readLines(all.files[i])
for (j in 1:20) {
txt[j] <- str_replace(txt[j],"{* *! version 25july2023}{...}","{* *! version 26jul2023}{...}")
txt[j] <- str_replace(txt[j],"\\{right: v1.2\\}","\\{right: v1.4\\}")
}
writeLines(txt,con=all.files[i])
}
setwd("/Users/kahrens/MyProjects/ddml")
library("stringr")
all.files <- dir()
all.files <- all.files[str_detect(all.files,"ado")]
for (i in 1:length(all.files)) {
txt <- readLines(all.files[i])
txt[1] <- "*! ddml v1.4"
txt[2] <- "*! last edited: 26july2023"
writeLines(txt,con=all.files[i])
}
all.files <- dir()
all.files <- all.files[str_detect(all.files,"sthlp")]
for (i in 1:length(all.files)) {
txt <- readLines(all.files[i])
for (j in 1:20) {
txt[j] <- str_replace(txt[j],"* *! version 25july2023","{* *! version 26jul2023")
txt[j] <- str_replace(txt[j],"\\{right: v1.2\\}","\\{right: v1.4\\}")
}
writeLines(txt,con=all.files[i])
}
setwd("/Users/kahrens/MyProjects/ddml")
library("stringr")
all.files <- dir()
all.files <- all.files[str_detect(all.files,"ado")]
for (i in 1:length(all.files)) {
txt <- readLines(all.files[i])
txt[1] <- "*! ddml v1.4"
txt[2] <- "*! last edited: 26july2023"
writeLines(txt,con=all.files[i])
}
all.files <- dir()
all.files <- all.files[str_detect(all.files,"sthlp")]
for (i in 1:length(all.files)) {
txt <- readLines(all.files[i])
for (j in 1:20) {
txt[j] <- str_replace(txt[j],"version 25july2023","{version 26july2023")
txt[j] <- str_replace(txt[j],"\\{right: v1.2\\}","\\{right: v1.4\\}")
}
writeLines(txt,con=all.files[i])
}
txt <- readLines(all.files[i])
txt
txt[437]
setwd("/Users/kahrens/MyProjects/ddml")
library("stringr")
all.files <- dir()
all.files <- all.files[str_detect(all.files,"ado")]
for (i in 1:length(all.files)) {
txt <- readLines(all.files[i])
txt[1] <- "*! ddml v1.4"
txt[2] <- "*! last edited: 26july2023"
writeLines(txt,con=all.files[i])
}
all.files <- dir()
all.files <- all.files[str_detect(all.files,"sthlp")]
for (i in 1:length(all.files)) {
txt <- readLines(all.files[i])
for (j in 1:20) {
if (!is.na(txt[j])) {
txt[j] <- str_replace(txt[j],"version 25july2023","{version 26july2023")
txt[j] <- str_replace(txt[j],"\\{right: v1.2\\}","\\{right: v1.4\\}")
}
}
writeLines(txt,con=all.files[i])
}
setwd("/Users/kahrens/MyProjects/ddml")
library("stringr")
all.files <- dir()
all.files <- all.files[str_detect(all.files,"ado")]
for (i in 1:length(all.files)) {
txt <- readLines(all.files[i])
txt[1] <- "*! ddml v1.4"
txt[2] <- "*! last edited: 26july2023"
writeLines(txt,con=all.files[i])
}
all.files <- dir()
all.files <- all.files[str_detect(all.files,"sthlp")]
for (i in 1:length(all.files)) {
txt <- readLines(all.files[i])
for (j in 1:20) {
if (!is.na(txt[j])) {
txt[j] <- str_replace(txt[j],"version 25jul2023","{version 26july2023")
txt[j] <- str_replace(txt[j],"\\{right: v1.2\\}","\\{right: v1.4\\}")
}
}
writeLines(txt,con=all.files[i])
}
setwd("/Users/kahrens/MyProjects/ddml")
library("stringr")
all.files <- dir()
all.files <- all.files[str_detect(all.files,"ado")]
for (i in 1:length(all.files)) {
txt <- readLines(all.files[i])
txt[1] <- "*! ddml v1.4"
txt[2] <- "*! last edited: 26july2023"
writeLines(txt,con=all.files[i])
}
all.files <- dir()
all.files <- all.files[str_detect(all.files,"sthlp")]
for (i in 1:length(all.files)) {
txt <- readLines(all.files[i])
for (j in 1:20) {
if (!is.na(txt[j])) {
txt[j] <- str_replace(txt[j],"version 25jul2023","version 26july2023")
txt[j] <- str_replace(txt[j],"\\{right: v1.2\\}","\\{right: v1.4\\}")
}
}
writeLines(txt,con=all.files[i])
}
setwd("/Users/kahrens/MyProjects/ddml")
library("stringr")
all.files <- dir()
all.files <- all.files[str_detect(all.files,"ado")]
for (i in 1:length(all.files)) {
txt <- readLines(all.files[i])
txt[1] <- "*! ddml v1.4"
txt[2] <- "*! last edited: 26july2023"
writeLines(txt,con=all.files[i])
}
all.files <- dir()
all.files <- all.files[str_detect(all.files,"sthlp")]
for (i in 1:length(all.files)) {
txt <- readLines(all.files[i])
for (j in 1:20) {
if (!is.na(txt[j])) {
txt[j] <- str_replace(txt[j],"version 25july2023","version 26july2023")
txt[j] <- str_replace(txt[j],"\\{right: v1.2\\}","\\{right: v1.4\\}")
}
}
writeLines(txt,con=all.files[i])
}
setwd("/Users/kahrens/MyProjects/ddml")
library("stringr")
all.files <- dir()
all.files <- all.files[str_detect(all.files,"ado")]
for (i in 1:length(all.files)) {
txt <- readLines(all.files[i])
txt[1] <- "*! ddml v1.4"
txt[2] <- "*! last edited: 26july2023"
writeLines(txt,con=all.files[i])
}
all.files <- dir()
all.files <- all.files[str_detect(all.files,"sthlp")]
for (i in 1:length(all.files)) {
txt <- readLines(all.files[i])
for (j in 1:20) {
if (!is.na(txt[j])) {
txt[j] <- str_replace(txt[j],"version 25jul2023","version 26july2023")
txt[j] <- str_replace(txt[j],"\\{right: v1.2\\}","\\{right: v1.4\\}")
}
}
writeLines(txt,con=all.files[i])
}
setwd("/Users/kahrens/MyProjects/ddml")
library("stringr")
all.files <- dir()
all.files <- all.files[str_detect(all.files,"ado")]
for (i in 1:length(all.files)) {
txt <- readLines(all.files[i])
txt[1] <- "*! ddml v1.4"
txt[2] <- "*! last edited: 26july2023"
writeLines(txt,con=all.files[i])
}
all.files <- dir()
all.files <- all.files[str_detect(all.files,"sthlp")]
for (i in 1:length(all.files)) {
txt <- readLines(all.files[i])
for (j in 1:20) {
if (!is.na(txt[j])) {
txt[j] <- str_replace(txt[j],"version 25july2023","version 26july2023")
txt[j] <- str_replace(txt[j],"\\{right: v1.2\\}","\\{right: v1.4\\}")
}
}
writeLines(txt,con=all.files[i])
}
q("no")
